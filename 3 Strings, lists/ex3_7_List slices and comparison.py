# 3.7 Срезы списков. Операторы сравнения списков

# Как и в строках, индекс элемента списка и срез задаются в квадратных скобках

lst = ["Москва", "Уфа", "Тверь", "Казань"]
print(lst[1:3])
# По аналогии со строками, индекс не включает последний элемент

a = lst[1:3]
a[0] = "Воронеж"
print(a)
print(lst)
print(lst[2:])
print(lst[:3])

# копия списка
print("\n", "Копия срезом", sep='')
cities = lst[:]
print(cities)
print(id(lst))
print(id(cities), "\n")
# второй вариант
print("Копия функцией list")
c = list(lst)
print(c)
print(id(lst))
print(id(c), "\n")


# простое присвоение создает ссылку на тот же список
print("Присвоение создает ссылку на тот же список")
city = lst
print(lst)
print(city)
print(id(lst))
print(id(city))
lst[0] = "Петербург"
print(lst)
print(city)
print(id(lst))
print(id(city), "\n")

# Вариант нумерации индекса с конца
marks = [2, 3, 4, 3, 5, 2]
print(marks)
print(marks[2:-1])
print(marks[-4:-1])

# Шаг перебора элементов
print("\n", "Шаг перебора элементов", sep='')
print(marks[1:5:2])
print(marks[:5:2])
print(marks[::2])
print(marks[::-1])
print(marks[::-2])

# Изменение группы элементов списка
marks[2:4] = ["хорошо", "удовлетворительно"]
print(marks)
marks[::2] = [0, 0, 0]
print(marks)
# нужно проверять соответствие размеров группы изменяемых элементов списка
# при изменении размера списка возможна ошибка, поэтому границы среза лучше задать более явно
marks[:5:2] = [1, 1, 1]
print(marks)
marks[2:4] = 10, 20
print(marks)

# Сравнение списков
print("\n", "Сравнение списков", sep='')
res = [1, 2, 3] == [1, 2, 3]
print(res)
res = [1, 2, 3] != [1, 2, 3]
print(res)
# сравнение происходит поэлементно, при положительном результате сравнения текущих элементов, сравнение прекращается
res = [10, 2, 3] > [1, 2, 3]
print(res)
print([1, 2, 3, 4] > [1, 2, 3])
print([1, 2, 3, 4] > [10, 2, 3])
print([1, 2, 3, 4] < [10, 2, 3])

# Задачи
print("\n", "Tasks", sep='')
# Task 5
# При обратном движении по срезу порядок указания границ так же обратный
# В срез включается начальная граница и не включается конечная
# Необходимо с помощью срезов выбрать элементы с 3-го по 7-й (включительно) и вывести их на экран в обратном порядке.
# Variant 1
m = [2, 3, 5, 5, 2, 2, 3, 3, 4, 5, 4, 4]
print(m[6:1:-1])
# Variant 2
# Синтаксис среза сразу после формирования списка
print([2, 3, 5, 5, 2, 2, 3, 3, 4, 5, 4, 4][6:1:-1])


